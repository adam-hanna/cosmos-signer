// Code generated by MockGen. DO NOT EDIT.
// Source: codec.go
//
// Generated by this command:
//
//	mockgen -source=codec.go -destination=codec_mock.go
//

// Package mock_codec is a generated GoMock package.
package testfiles

import (
	reflect "reflect"

	"github.com/cosmos/cosmos-sdk/codec"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	gomock "go.uber.org/mock/gomock"
	encoding "google.golang.org/grpc/encoding"
	proto0 "google.golang.org/protobuf/proto"
)

// MockCodec is a mock of Codec interface.
type MockCodec struct {
	codec.Codec
	ctrl     *gomock.Controller
	recorder *MockCodecMockRecorder
}

// MockCodecMockRecorder is the mock recorder for MockCodec.
type MockCodecMockRecorder struct {
	mock *MockCodec
}

// NewMockCodec creates a new mock instance.
func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &MockCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodec) EXPECT() *MockCodecMockRecorder {
	return m.recorder
}

// GetMsgAnySigners mocks base method.
func (m *MockCodec) GetMsgAnySigners(msg *types.Any) ([][]byte, proto0.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgAnySigners", msg)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(proto0.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMsgAnySigners indicates an expected call of GetMsgAnySigners.
func (mr *MockCodecMockRecorder) GetMsgAnySigners(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgAnySigners", reflect.TypeOf((*MockCodec)(nil).GetMsgAnySigners), msg)
}

// GetMsgV1Signers mocks base method.
func (m *MockCodec) GetMsgV1Signers(msg proto.Message) ([][]byte, proto0.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgV1Signers", msg)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(proto0.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMsgV1Signers indicates an expected call of GetMsgV1Signers.
func (mr *MockCodecMockRecorder) GetMsgV1Signers(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgV1Signers", reflect.TypeOf((*MockCodec)(nil).GetMsgV1Signers), msg)
}

// GetMsgV2Signers mocks base method.
func (m *MockCodec) GetMsgV2Signers(msg proto0.Message) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgV2Signers", msg)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsgV2Signers indicates an expected call of GetMsgV2Signers.
func (mr *MockCodecMockRecorder) GetMsgV2Signers(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgV2Signers", reflect.TypeOf((*MockCodec)(nil).GetMsgV2Signers), msg)
}

// InterfaceRegistry mocks base method.
func (m *MockCodec) InterfaceRegistry() types.InterfaceRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceRegistry")
	ret0, _ := ret[0].(types.InterfaceRegistry)
	return ret0
}

// InterfaceRegistry indicates an expected call of InterfaceRegistry.
func (mr *MockCodecMockRecorder) InterfaceRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceRegistry", reflect.TypeOf((*MockCodec)(nil).InterfaceRegistry))
}

// Marshal mocks base method.
func (m *MockCodec) Marshal(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockCodecMockRecorder) Marshal(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockCodec)(nil).Marshal), o)
}

// MarshalInterface mocks base method.
func (m *MockCodec) MarshalInterface(i proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalInterface", i)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalInterface indicates an expected call of MarshalInterface.
func (mr *MockCodecMockRecorder) MarshalInterface(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalInterface", reflect.TypeOf((*MockCodec)(nil).MarshalInterface), i)
}

// MarshalInterfaceJSON mocks base method.
func (m *MockCodec) MarshalInterfaceJSON(i proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalInterfaceJSON", i)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalInterfaceJSON indicates an expected call of MarshalInterfaceJSON.
func (mr *MockCodecMockRecorder) MarshalInterfaceJSON(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalInterfaceJSON", reflect.TypeOf((*MockCodec)(nil).MarshalInterfaceJSON), i)
}

// MarshalJSON mocks base method.
func (m *MockCodec) MarshalJSON(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockCodecMockRecorder) MarshalJSON(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockCodec)(nil).MarshalJSON), o)
}

// MarshalLengthPrefixed mocks base method.
func (m *MockCodec) MarshalLengthPrefixed(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalLengthPrefixed", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalLengthPrefixed indicates an expected call of MarshalLengthPrefixed.
func (mr *MockCodecMockRecorder) MarshalLengthPrefixed(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalLengthPrefixed", reflect.TypeOf((*MockCodec)(nil).MarshalLengthPrefixed), o)
}

// MustMarshal mocks base method.
func (m *MockCodec) MustMarshal(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshal", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshal indicates an expected call of MustMarshal.
func (mr *MockCodecMockRecorder) MustMarshal(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshal", reflect.TypeOf((*MockCodec)(nil).MustMarshal), o)
}

// MustMarshalJSON mocks base method.
func (m *MockCodec) MustMarshalJSON(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshalJSON", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshalJSON indicates an expected call of MustMarshalJSON.
func (mr *MockCodecMockRecorder) MustMarshalJSON(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshalJSON", reflect.TypeOf((*MockCodec)(nil).MustMarshalJSON), o)
}

// MustMarshalLengthPrefixed mocks base method.
func (m *MockCodec) MustMarshalLengthPrefixed(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshalLengthPrefixed", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshalLengthPrefixed indicates an expected call of MustMarshalLengthPrefixed.
func (mr *MockCodecMockRecorder) MustMarshalLengthPrefixed(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshalLengthPrefixed", reflect.TypeOf((*MockCodec)(nil).MustMarshalLengthPrefixed), o)
}

// MustUnmarshal mocks base method.
func (m *MockCodec) MustUnmarshal(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshal", bz, ptr)
}

// MustUnmarshal indicates an expected call of MustUnmarshal.
func (mr *MockCodecMockRecorder) MustUnmarshal(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshal", reflect.TypeOf((*MockCodec)(nil).MustUnmarshal), bz, ptr)
}

// MustUnmarshalJSON mocks base method.
func (m *MockCodec) MustUnmarshalJSON(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshalJSON", bz, ptr)
}

// MustUnmarshalJSON indicates an expected call of MustUnmarshalJSON.
func (mr *MockCodecMockRecorder) MustUnmarshalJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshalJSON", reflect.TypeOf((*MockCodec)(nil).MustUnmarshalJSON), bz, ptr)
}

// MustUnmarshalLengthPrefixed mocks base method.
func (m *MockCodec) MustUnmarshalLengthPrefixed(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshalLengthPrefixed", bz, ptr)
}

// MustUnmarshalLengthPrefixed indicates an expected call of MustUnmarshalLengthPrefixed.
func (mr *MockCodecMockRecorder) MustUnmarshalLengthPrefixed(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshalLengthPrefixed", reflect.TypeOf((*MockCodec)(nil).MustUnmarshalLengthPrefixed), bz, ptr)
}

// Unmarshal mocks base method.
func (m *MockCodec) Unmarshal(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockCodecMockRecorder) Unmarshal(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockCodec)(nil).Unmarshal), bz, ptr)
}

// UnmarshalInterface mocks base method.
func (m *MockCodec) UnmarshalInterface(bz []byte, ptr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalInterface", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalInterface indicates an expected call of UnmarshalInterface.
func (mr *MockCodecMockRecorder) UnmarshalInterface(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalInterface", reflect.TypeOf((*MockCodec)(nil).UnmarshalInterface), bz, ptr)
}

// UnmarshalInterfaceJSON mocks base method.
func (m *MockCodec) UnmarshalInterfaceJSON(bz []byte, ptr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalInterfaceJSON", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalInterfaceJSON indicates an expected call of UnmarshalInterfaceJSON.
func (mr *MockCodecMockRecorder) UnmarshalInterfaceJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalInterfaceJSON", reflect.TypeOf((*MockCodec)(nil).UnmarshalInterfaceJSON), bz, ptr)
}

// UnmarshalJSON mocks base method.
func (m *MockCodec) UnmarshalJSON(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJSON", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON.
func (mr *MockCodecMockRecorder) UnmarshalJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockCodec)(nil).UnmarshalJSON), bz, ptr)
}

// UnmarshalLengthPrefixed mocks base method.
func (m *MockCodec) UnmarshalLengthPrefixed(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalLengthPrefixed", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalLengthPrefixed indicates an expected call of UnmarshalLengthPrefixed.
func (mr *MockCodecMockRecorder) UnmarshalLengthPrefixed(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalLengthPrefixed", reflect.TypeOf((*MockCodec)(nil).UnmarshalLengthPrefixed), bz, ptr)
}

// UnpackAny mocks base method.
func (m *MockCodec) UnpackAny(any *types.Any, iface any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpackAny", any, iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpackAny indicates an expected call of UnpackAny.
func (mr *MockCodecMockRecorder) UnpackAny(any, iface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpackAny", reflect.TypeOf((*MockCodec)(nil).UnpackAny), any, iface)
}

// mustEmbedCodec mocks base method.
func (m *MockCodec) mustEmbedCodec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedCodec")
}

// mustEmbedCodec indicates an expected call of mustEmbedCodec.
func (mr *MockCodecMockRecorder) mustEmbedCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedCodec", reflect.TypeOf((*MockCodec)(nil).mustEmbedCodec))
}

// MockBinaryCodec is a mock of BinaryCodec interface.
type MockBinaryCodec struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryCodecMockRecorder
}

// MockBinaryCodecMockRecorder is the mock recorder for MockBinaryCodec.
type MockBinaryCodecMockRecorder struct {
	mock *MockBinaryCodec
}

// NewMockBinaryCodec creates a new mock instance.
func NewMockBinaryCodec(ctrl *gomock.Controller) *MockBinaryCodec {
	mock := &MockBinaryCodec{ctrl: ctrl}
	mock.recorder = &MockBinaryCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryCodec) EXPECT() *MockBinaryCodecMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockBinaryCodec) Marshal(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockBinaryCodecMockRecorder) Marshal(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockBinaryCodec)(nil).Marshal), o)
}

// MarshalInterface mocks base method.
func (m *MockBinaryCodec) MarshalInterface(i proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalInterface", i)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalInterface indicates an expected call of MarshalInterface.
func (mr *MockBinaryCodecMockRecorder) MarshalInterface(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalInterface", reflect.TypeOf((*MockBinaryCodec)(nil).MarshalInterface), i)
}

// MarshalLengthPrefixed mocks base method.
func (m *MockBinaryCodec) MarshalLengthPrefixed(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalLengthPrefixed", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalLengthPrefixed indicates an expected call of MarshalLengthPrefixed.
func (mr *MockBinaryCodecMockRecorder) MarshalLengthPrefixed(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalLengthPrefixed", reflect.TypeOf((*MockBinaryCodec)(nil).MarshalLengthPrefixed), o)
}

// MustMarshal mocks base method.
func (m *MockBinaryCodec) MustMarshal(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshal", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshal indicates an expected call of MustMarshal.
func (mr *MockBinaryCodecMockRecorder) MustMarshal(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshal", reflect.TypeOf((*MockBinaryCodec)(nil).MustMarshal), o)
}

// MustMarshalLengthPrefixed mocks base method.
func (m *MockBinaryCodec) MustMarshalLengthPrefixed(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshalLengthPrefixed", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshalLengthPrefixed indicates an expected call of MustMarshalLengthPrefixed.
func (mr *MockBinaryCodecMockRecorder) MustMarshalLengthPrefixed(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshalLengthPrefixed", reflect.TypeOf((*MockBinaryCodec)(nil).MustMarshalLengthPrefixed), o)
}

// MustUnmarshal mocks base method.
func (m *MockBinaryCodec) MustUnmarshal(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshal", bz, ptr)
}

// MustUnmarshal indicates an expected call of MustUnmarshal.
func (mr *MockBinaryCodecMockRecorder) MustUnmarshal(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshal", reflect.TypeOf((*MockBinaryCodec)(nil).MustUnmarshal), bz, ptr)
}

// MustUnmarshalLengthPrefixed mocks base method.
func (m *MockBinaryCodec) MustUnmarshalLengthPrefixed(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshalLengthPrefixed", bz, ptr)
}

// MustUnmarshalLengthPrefixed indicates an expected call of MustUnmarshalLengthPrefixed.
func (mr *MockBinaryCodecMockRecorder) MustUnmarshalLengthPrefixed(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshalLengthPrefixed", reflect.TypeOf((*MockBinaryCodec)(nil).MustUnmarshalLengthPrefixed), bz, ptr)
}

// Unmarshal mocks base method.
func (m *MockBinaryCodec) Unmarshal(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockBinaryCodecMockRecorder) Unmarshal(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockBinaryCodec)(nil).Unmarshal), bz, ptr)
}

// UnmarshalInterface mocks base method.
func (m *MockBinaryCodec) UnmarshalInterface(bz []byte, ptr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalInterface", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalInterface indicates an expected call of UnmarshalInterface.
func (mr *MockBinaryCodecMockRecorder) UnmarshalInterface(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalInterface", reflect.TypeOf((*MockBinaryCodec)(nil).UnmarshalInterface), bz, ptr)
}

// UnmarshalLengthPrefixed mocks base method.
func (m *MockBinaryCodec) UnmarshalLengthPrefixed(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalLengthPrefixed", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalLengthPrefixed indicates an expected call of UnmarshalLengthPrefixed.
func (mr *MockBinaryCodecMockRecorder) UnmarshalLengthPrefixed(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalLengthPrefixed", reflect.TypeOf((*MockBinaryCodec)(nil).UnmarshalLengthPrefixed), bz, ptr)
}

// UnpackAny mocks base method.
func (m *MockBinaryCodec) UnpackAny(any *types.Any, iface any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpackAny", any, iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpackAny indicates an expected call of UnpackAny.
func (mr *MockBinaryCodecMockRecorder) UnpackAny(any, iface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpackAny", reflect.TypeOf((*MockBinaryCodec)(nil).UnpackAny), any, iface)
}

// MockJSONCodec is a mock of JSONCodec interface.
type MockJSONCodec struct {
	ctrl     *gomock.Controller
	recorder *MockJSONCodecMockRecorder
}

// MockJSONCodecMockRecorder is the mock recorder for MockJSONCodec.
type MockJSONCodecMockRecorder struct {
	mock *MockJSONCodec
}

// NewMockJSONCodec creates a new mock instance.
func NewMockJSONCodec(ctrl *gomock.Controller) *MockJSONCodec {
	mock := &MockJSONCodec{ctrl: ctrl}
	mock.recorder = &MockJSONCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONCodec) EXPECT() *MockJSONCodecMockRecorder {
	return m.recorder
}

// MarshalInterfaceJSON mocks base method.
func (m *MockJSONCodec) MarshalInterfaceJSON(i proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalInterfaceJSON", i)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalInterfaceJSON indicates an expected call of MarshalInterfaceJSON.
func (mr *MockJSONCodecMockRecorder) MarshalInterfaceJSON(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalInterfaceJSON", reflect.TypeOf((*MockJSONCodec)(nil).MarshalInterfaceJSON), i)
}

// MarshalJSON mocks base method.
func (m *MockJSONCodec) MarshalJSON(o proto.Message) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON", o)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockJSONCodecMockRecorder) MarshalJSON(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockJSONCodec)(nil).MarshalJSON), o)
}

// MustMarshalJSON mocks base method.
func (m *MockJSONCodec) MustMarshalJSON(o proto.Message) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMarshalJSON", o)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MustMarshalJSON indicates an expected call of MustMarshalJSON.
func (mr *MockJSONCodecMockRecorder) MustMarshalJSON(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMarshalJSON", reflect.TypeOf((*MockJSONCodec)(nil).MustMarshalJSON), o)
}

// MustUnmarshalJSON mocks base method.
func (m *MockJSONCodec) MustUnmarshalJSON(bz []byte, ptr proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustUnmarshalJSON", bz, ptr)
}

// MustUnmarshalJSON indicates an expected call of MustUnmarshalJSON.
func (mr *MockJSONCodecMockRecorder) MustUnmarshalJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustUnmarshalJSON", reflect.TypeOf((*MockJSONCodec)(nil).MustUnmarshalJSON), bz, ptr)
}

// UnmarshalInterfaceJSON mocks base method.
func (m *MockJSONCodec) UnmarshalInterfaceJSON(bz []byte, ptr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalInterfaceJSON", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalInterfaceJSON indicates an expected call of UnmarshalInterfaceJSON.
func (mr *MockJSONCodecMockRecorder) UnmarshalInterfaceJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalInterfaceJSON", reflect.TypeOf((*MockJSONCodec)(nil).UnmarshalInterfaceJSON), bz, ptr)
}

// UnmarshalJSON mocks base method.
func (m *MockJSONCodec) UnmarshalJSON(bz []byte, ptr proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJSON", bz, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON.
func (mr *MockJSONCodecMockRecorder) UnmarshalJSON(bz, ptr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockJSONCodec)(nil).UnmarshalJSON), bz, ptr)
}

// MockProtoMarshaler is a mock of ProtoMarshaler interface.
type MockProtoMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockProtoMarshalerMockRecorder
}

// MockProtoMarshalerMockRecorder is the mock recorder for MockProtoMarshaler.
type MockProtoMarshalerMockRecorder struct {
	mock *MockProtoMarshaler
}

// NewMockProtoMarshaler creates a new mock instance.
func NewMockProtoMarshaler(ctrl *gomock.Controller) *MockProtoMarshaler {
	mock := &MockProtoMarshaler{ctrl: ctrl}
	mock.recorder = &MockProtoMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtoMarshaler) EXPECT() *MockProtoMarshalerMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockProtoMarshaler) Marshal() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockProtoMarshalerMockRecorder) Marshal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockProtoMarshaler)(nil).Marshal))
}

// MarshalTo mocks base method.
func (m *MockProtoMarshaler) MarshalTo(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockProtoMarshalerMockRecorder) MarshalTo(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockProtoMarshaler)(nil).MarshalTo), data)
}

// MarshalToSizedBuffer mocks base method.
func (m *MockProtoMarshaler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalToSizedBuffer", dAtA)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalToSizedBuffer indicates an expected call of MarshalToSizedBuffer.
func (mr *MockProtoMarshalerMockRecorder) MarshalToSizedBuffer(dAtA any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalToSizedBuffer", reflect.TypeOf((*MockProtoMarshaler)(nil).MarshalToSizedBuffer), dAtA)
}

// ProtoMessage mocks base method.
func (m *MockProtoMarshaler) ProtoMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoMessage")
}

// ProtoMessage indicates an expected call of ProtoMessage.
func (mr *MockProtoMarshalerMockRecorder) ProtoMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMessage", reflect.TypeOf((*MockProtoMarshaler)(nil).ProtoMessage))
}

// Reset mocks base method.
func (m *MockProtoMarshaler) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockProtoMarshalerMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockProtoMarshaler)(nil).Reset))
}

// Size mocks base method.
func (m *MockProtoMarshaler) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockProtoMarshalerMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockProtoMarshaler)(nil).Size))
}

// String mocks base method.
func (m *MockProtoMarshaler) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockProtoMarshalerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockProtoMarshaler)(nil).String))
}

// Unmarshal mocks base method.
func (m *MockProtoMarshaler) Unmarshal(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockProtoMarshalerMockRecorder) Unmarshal(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockProtoMarshaler)(nil).Unmarshal), data)
}

// MockAminoMarshaler is a mock of AminoMarshaler interface.
type MockAminoMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockAminoMarshalerMockRecorder
}

// MockAminoMarshalerMockRecorder is the mock recorder for MockAminoMarshaler.
type MockAminoMarshalerMockRecorder struct {
	mock *MockAminoMarshaler
}

// NewMockAminoMarshaler creates a new mock instance.
func NewMockAminoMarshaler(ctrl *gomock.Controller) *MockAminoMarshaler {
	mock := &MockAminoMarshaler{ctrl: ctrl}
	mock.recorder = &MockAminoMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAminoMarshaler) EXPECT() *MockAminoMarshalerMockRecorder {
	return m.recorder
}

// MarshalAmino mocks base method.
func (m *MockAminoMarshaler) MarshalAmino() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAmino")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalAmino indicates an expected call of MarshalAmino.
func (mr *MockAminoMarshalerMockRecorder) MarshalAmino() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAmino", reflect.TypeOf((*MockAminoMarshaler)(nil).MarshalAmino))
}

// MarshalAminoJSON mocks base method.
func (m *MockAminoMarshaler) MarshalAminoJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAminoJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalAminoJSON indicates an expected call of MarshalAminoJSON.
func (mr *MockAminoMarshalerMockRecorder) MarshalAminoJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAminoJSON", reflect.TypeOf((*MockAminoMarshaler)(nil).MarshalAminoJSON))
}

// UnmarshalAmino mocks base method.
func (m *MockAminoMarshaler) UnmarshalAmino(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalAmino", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalAmino indicates an expected call of UnmarshalAmino.
func (mr *MockAminoMarshalerMockRecorder) UnmarshalAmino(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalAmino", reflect.TypeOf((*MockAminoMarshaler)(nil).UnmarshalAmino), arg0)
}

// UnmarshalAminoJSON mocks base method.
func (m *MockAminoMarshaler) UnmarshalAminoJSON(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalAminoJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalAminoJSON indicates an expected call of UnmarshalAminoJSON.
func (mr *MockAminoMarshalerMockRecorder) UnmarshalAminoJSON(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalAminoJSON", reflect.TypeOf((*MockAminoMarshaler)(nil).UnmarshalAminoJSON), arg0)
}

// MockGRPCCodecProvider is a mock of GRPCCodecProvider interface.
type MockGRPCCodecProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCCodecProviderMockRecorder
}

// MockGRPCCodecProviderMockRecorder is the mock recorder for MockGRPCCodecProvider.
type MockGRPCCodecProviderMockRecorder struct {
	mock *MockGRPCCodecProvider
}

// NewMockGRPCCodecProvider creates a new mock instance.
func NewMockGRPCCodecProvider(ctrl *gomock.Controller) *MockGRPCCodecProvider {
	mock := &MockGRPCCodecProvider{ctrl: ctrl}
	mock.recorder = &MockGRPCCodecProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCCodecProvider) EXPECT() *MockGRPCCodecProviderMockRecorder {
	return m.recorder
}

// GRPCCodec mocks base method.
func (m *MockGRPCCodecProvider) GRPCCodec() encoding.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCCodec")
	ret0, _ := ret[0].(encoding.Codec)
	return ret0
}

// GRPCCodec indicates an expected call of GRPCCodec.
func (mr *MockGRPCCodecProviderMockRecorder) GRPCCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCCodec", reflect.TypeOf((*MockGRPCCodecProvider)(nil).GRPCCodec))
}
